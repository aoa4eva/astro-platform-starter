<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Voice Invoice Generator</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        padding: 20px;
      }
      h1 {
        font-size: 24px;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }
      th, td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
      }
      th {
        background-color: #f0f0f0;
      }
      button {
        padding: 10px 15px;
        font-size: 16px;
        margin-top: 10px;
      }
    </style>
  </head>
  <body>
    <h1>Invoice Generator</h1>
    <p>Click the button and say each item like: <i>"Drywall installation 300"</i></p>
    <button onclick="recordAndTranscribe()">+ New Item (Voice)</button>

    <table id="invoiceTable">
      <thead>
        <tr>
          <th>#</th>
          <th>Description</th>
          <th>Amount ($)</th>
        </tr>
      </thead>
      <tbody></tbody>
      <tfoot>
        <tr>
          <td colspan="2"><strong>Total</strong></td>
          <td id="total">$0</td>
        </tr>
      </tfoot>
    </table>

    <!-- Whisper.js -->
    <script type="module">
      import { pipeline } from 'https://cdn.jsdelivr.net/npm/@xenova/transformers@2.6.0';

      let transcriber;
      let itemCount = 0;
      let total = 0;

      async function loadModel() {
        if (!transcriber) {
          transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');
        }
      }

      async function recordAndTranscribe() {
        await loadModel();

        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const mediaRecorder = new MediaRecorder(stream);
        const audioChunks = [];

        mediaRecorder.ondataavailable = event => {
          if (event.data.size > 0) audioChunks.push(event.data);
        };

        mediaRecorder.onstop = async () => {
          const blob = new Blob(audioChunks);
          const arrayBuffer = await blob.arrayBuffer();
          const result = await transcriber(ar
